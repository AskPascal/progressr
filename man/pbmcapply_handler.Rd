% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/progression_handlers.R
\name{pbmcapply_handler}
\alias{pbmcapply_handler}
\title{Visual Progression Feedback}
\usage{
pbmcapply_handler(substyle = 3L, style = "ETA", file = stderr(),
  intrusiveness = getOption("progressr.intrusiveness.terminal", 1), ...)
}
\arguments{
\item{substyle}{(integer) The progress-bar substyle according to \code{\link[pbmcapply:progressBar]{pbmcapply::progressBar()}}.}

\item{style}{(character) The progress-bar style according to \code{\link[pbmcapply:progressBar]{pbmcapply::progressBar()}}.}

\item{file}{(connection) A \link[base:connection]{base::connection} to where output should be sent.}

\item{intrusiveness}{(numeric) A non-negative scalar on how intrusive
(disruptive) the reporter to the user.}

\item{\ldots}{Additional arguments passed to \code{\link[=progression_handler]{progression_handler()}}.}
}
\description{
A progression handler for \code{\link[pbmcapply:progressBar]{pbmcapply::progressBar()}}.
}
\examples{
if (requireNamespace("pbmcapply", quietly = TRUE)) local({
  oopts <- options(progressr.clear = FALSE,
                   progressr.handlers = pbmcapply_handler)
  on.exit(oopts)

  x <- 1:10
  with_progress({ y <- slow_sum(x) })
  
  print(y)
})
}
